name: PSSA-Release-$(Build.BuildId)
trigger: none

pr:
  branches:
    include:
    - master
    - release*

variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance
    ref: master

stages:
- stage: Build
  displayName: Build
  pool:
    name: Package ES CodeHub Lab E
  jobs:
  - job: Build_Job
    displayName: Build Microsoft.PowerShell.ScriptAnalyzer
    variables:
    - group: ESRP
    steps:
    - checkout: self

    - pwsh: |
        Set-Location "$(Build.SourcesDirectory)/OSS_Microsoft_PSSA"
        try { ./build.ps1 -Configuration Release -All } catch { throw $_ }
      displayName: Execute build

    - pwsh: |
        $signSrcPath = "$(Build.SourcesDirectory)/OSS_Microsoft_PSSA/out"
        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $signOutStep1 = "$(Build.SourcesDirectory)/OSS_Microsoft_PSSA/Step1"
        $null = New-Item -ItemType Directory -Path $signOutStep1
        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutStep1]${signOutStep1}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $signOutPath = "$(Build.SourcesDirectory)/OSS_Microsoft_PSSA/signed"
        $null = New-Item -ItemType Directory -Path $signOutPath
        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        # Set path variable for guardian codesign validation
        $vstsCommandString = "vso[task.setvariable variable=GDN_CODESIGN_TARGETDIRECTORY]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        # Get version and create a variable
        $moduleData = Import-PowerShellDataFile "$(Build.SourcesDirectory)/OSS_Microsoft_PSSA/Engine/PSScriptAnalyzer.psd1"
        $moduleVersion = $moduleData.ModuleVersion
        $vstsCommandString = "vso[task.setvariable variable variable=MODULE_VERSION]$moduleVersion"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"


      displayName: Setup variables for signing

    - checkout: ComplianceRepo

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        # the folder which contains the binaries to sign
        buildOutputPath: $(signSrcPath)
        # the location to put the signed output
        signOutputPath: $(signOutStep1)
        # the certificate ID to use
        certificateId: "CP-230012"
        # use minimatch because we need to exclude the NewtonSoft assembly
        useMinimatch: true
        # the file pattern to use - newtonSoft is excluded
        pattern: |
          **\*.psd1
          **\*.psm1
          **\*.ps1xml
          **\Microsoft*.dll

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        # the folder which contains the binaries to sign
        buildOutputPath: $(signOutStep1)
        # the location to put the signed output
        signOutputPath: $(signOutPath)
        # the certificate ID to use
        # we'll need to change this to the 3rd party cert id
        certificateId: "CP-231522"
        # the file pattern to use - only sign newtonsoft
        pattern: 'Newtonsoft*.dll'

    - pwsh: |
        Set-Location "$(Build.SourcesDirectory)/OSS_Microsoft_PSSA"
        ./build -BuildNupkg -signed
      displayName: Create nupkg for publishing

    - publish: "$(Build.SourcesDirectory)/OSS_Microsoft_PSSA"
      artifact: build
      displayName: publish build directory

      # export the nupkg only
    - publish: "$(signOutPath)/PSScriptAnalyzer.$(moduleVersion).nupkg"
      artifact: nupkg
      displayName: Publish module nupkg

- stage: compliance
  displayName: Compliance
  dependsOn: Build
  jobs:
  - job: Compliance_Job
    pool:
      name: Package ES CodeHub Lab E
    steps:
    - checkout: self
    - checkout: ComplianceRepo
    - download: current
      artifact: build

    - pwsh: |
        Get-ChildItem -Path "$(Pipeline.Workspace)\build" -Recurse
        Get-Location
        Get-ChildItem -Recurse -File -Name
      displayName: Capture downloaded artifacts

    - template: assembly-module-compliance.yml@ComplianceRepo
      parameters:
        # component-governance
        sourceScanPath: '$(Build.SourcesDirectory)/OSS_Microsoft_PSSA'
        # binskim
        AnalyzeTarget: '$(Pipeline.Workspace)\build\bin\PSV7Release\netcoreapp3.1\*.dll'
        # credscan
        suppressionsFile: '$(Build.SourcesDirectory)/OSS_Microsoft_PSSA/tools/ReleaseBuild/CredScan.Suppressions.json'
        # TermCheck
        optionsRulesDBPath: ''
        optionsFTPath: ''
        # tsa-upload
        codeBaseName: 'PSSA_202004'
        # selections
        APIScan: false # set to false when not using Windows APIs.

#- template: template/publish.yml
#  parameters:
#    stageName: AzArtifactsFeed
#    environmentName:
#    feedCredential:

#- template: template/publish.yml
#  parameters:
#    stageName: NuGet
#    environmentName: PSMarkdownRenderNuGetApproval
#    feedCredential: NugetOrgPush
