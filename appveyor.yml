environment:
  matrix:
  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    PowerShellEdition: PowerShellCore
    BuildConfiguration: Release
  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    PowerShellEdition: Desktop
    BuildConfiguration: Release

clone_folder: C:\projects\psscriptanalyzer

# cache Nuget packages and dotnet CLI cache
cache:
  - '%USERPROFILE%\.nuget\packages -> appveyor.yml'
  - '%LocalAppData%\Microsoft\dotnet -> appveyor.yml'

install:
  - ps:   if ($env:PowerShellEdition -eq 'Desktop')        { Import-Module .\tools\Appveyor.psm1; Invoke-AppveyorInstall }
  - pwsh: if ($env:PowerShellEdition -eq 'PowerShellCore') { Import-Module .\tools\Appveyor.psm1; Invoke-AppveyorInstall }

build_script:
  - ps:   |
            if ($env:PowerShellEdition -eq 'Desktop') {
                Invoke-AppveyorBuild -CheckoutPath 'C:\projects\psscriptanalyzer' -BuildConfiguration $env:BuildConfiguration -BuildType 'FullCLR'
            }
  - pwsh: |
            if ($env:PowerShellEdition -eq 'PowerShellCore') {
                Import-Module .\tools\Appveyor.psm1 # Appveyor does not persist pwsh sessions like it does for ps
                Invoke-AppveyorBuild -CheckoutPath 'C:\projects\psscriptanalyzer' -BuildConfiguration $env:BuildConfiguration -BuildType 'NetStandard'
            }

test_script:
  - SET PATH=C:\Program Files\WindowsPowerShell\Modules\;%PATH%;
    - ps: |
        if ($env:PowerShellEdition -eq 'Desktop') {
            Copy-Item "C:\projects\psscriptanalyzer\out\PSScriptAnalyzer" "$Env:ProgramFiles\WindowsPowerShell\Modules\" -Recurse -Force
            $testResultsFile = ".\TestResults.xml"
            $testScripts = "C:\projects\psscriptanalyzer\Tests\Engine","C:\projects\psscriptanalyzer\Tests\Rules"
            $testResults = Invoke-Pester -Script $testScripts -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
            (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
            if ($testResults.FailedCount -gt 0) {
                throw "$($testResults.FailedCount) tests failed."
            }
        }
    - pwsh: |
        if ($env:PowerShellEdition -eq 'PowerShellCore') {
            Copy-Item "C:\projects\psscriptanalyzer\out\PSScriptAnalyzer" "$Env:ProgramFiles\powershell\6.0.0\Modules\" -Recurse -Force
            $testResultsFile = ".\TestResults.xml"
            $testScripts = "C:\projects\psscriptanalyzer\Tests\Engine","C:\projects\psscriptanalyzer\Tests\Rules"
            $testResults = Invoke-Pester -Script $testScripts -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
            (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
            if ($testResults.FailedCount -gt 0) {
                throw "$($testResults.FailedCount) tests failed."
            }
        }

# Upload the project along with test results as a zip archive
on_finish:
  - ps:   if ($env:PowerShellEdition -eq 'Desktop')        { Invoke-AppveyorFinish }
  - pwsh: if ($env:PowerShellEdition -eq 'PowerShellCore') { Import-Module .\tools\Appveyor.psm1; Invoke-AppveyorFinish }
