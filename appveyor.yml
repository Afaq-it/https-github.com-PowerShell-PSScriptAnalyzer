environment:
  matrix:
  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    PowerShellEdition: Desktop
    BuildConfiguration: Release
  - APPVEYOR_BUILD_WORKER_IMAGE: WMF 4
    PowerShellEdition: Desktop
    BuildConfiguration: PSv3Release

# clone directory
clone_folder: c:\projects\psscriptanalyzer

# Install Pester
install:
    - ps: nuget install platyPS -Version 0.5.0 -source https://www.powershellgallery.com/api/v2 -outputDirectory "$Env:ProgramFiles\WindowsPowerShell\Modules\." -ExcludeVersion
    - ps: |
        $Pester = Get-Module Pester -ListAvailable
        $Pester
        if ($null -eq $Pester) # WMF 4 build does not have pester
        {
            Install-Module Pester -Scope CurrentUser -RequiredVersion 3.4
            Import-Module Pester
        }
    - ps: |
        # the legacy WMF4 image only has the old preview SDKs of dotnet
        if (-not ((dotnet --version).StartsWith('1.1')))
        {
            Invoke-WebRequest 'https://dot.net/v1/dotnet-install.ps1' -OutFile dotnet-install.ps1
            .\dotnet-install.ps1 -Channel 1.1
        }

build_script:
    - ps: |
        $PSVersionTable
        Push-Location C:\projects\psscriptanalyzer
        dotnet --version
        Push-Location .\Engine
        dotnet restore Engine.csproj | Out-Null
        Pop-Location
        Push-Location Rules
        dotnet restore Rules.csproj | Out-Null
        Pop-Location
        C:\projects\psscriptanalyzer\buildCoreClr.ps1 -Framework net451 -Configuration $env:BuildConfiguration -Build
        C:\projects\psscriptanalyzer\build.ps1 -BuildDocs
        Pop-Location

# branches to build
branches:
  # whitelist
  only:
    - master
    - development

# Run Pester tests and store the results
test_script:
    - SET PATH=c:\Program Files\WindowsPowerShell\Modules\;%PATH%;
    - ps: |
        copy "C:\projects\psscriptanalyzer\out\PSScriptAnalyzer" "$Env:ProgramFiles\WindowsPowerShell\Modules\" -Recurse -Force
        $engineTestResultsFile = ".\EngineTestResults.xml"
        $ruleTestResultsFile = ".\RuleTestResults.xml"
        $engineTestResults = Invoke-Pester -Script "C:\projects\psscriptanalyzer\Tests\Engine" -OutputFormat NUnitXml -OutputFile $engineTestResultsFile -PassThru
        (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $engineTestResultsFile))
        if ($engineTestResults.FailedCount -gt 0) {
            throw "$($engineTestResults.FailedCount) tests failed."
        }
        $ruleTestResults = Invoke-Pester -Script "C:\projects\psscriptanalyzer\Tests\Rules" -OutputFormat NUnitXml -OutputFile $ruleTestResultsFile -PassThru
        (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $ruleTestResultsFile))
        if ($ruleTestResults.FailedCount -gt 0) {
            throw "$($ruleTestResults.FailedCount) tests failed."
        }

# Upload the project along with TestResults as a zip archive
on_finish:
    - ps: |
        $stagingDirectory = (Resolve-Path ..).Path
        $zipFile = Join-Path $stagingDirectory "$(Split-Path $pwd -Leaf).zip"
        Add-Type -assemblyname System.IO.Compression.FileSystem
        [System.IO.Compression.ZipFile]::CreateFromDirectory($pwd, $zipFile)
        @(
            # You can add other artifacts here
            (ls $zipFile)
        ) | % { Push-AppveyorArtifact $_.FullName }
